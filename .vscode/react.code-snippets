{
  "-useReducer": {
    "prefix": "react",
    "body": [
      "",
      "",
      "",
      "",
      "  const [state, dispatch]: [${TM_FILENAME_BASE}_State, React.Dispatch<${TM_FILENAME_BASE}_Actions>] = useReducer<",
      "    Reducer<${TM_FILENAME_BASE}_State, ${TM_FILENAME_BASE}_Actions>",
      "  >(reducer, stateInitialiser());",
      "",
      "",
      "",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "-Zustand Init": {
    "prefix": "react",
    "body": [
      "import { create } from 'zustand';",
      "import { persist } from 'zustand/middleware';",
      "import { createSelectors } from '@data-zustand';",
      "",
      "type ${TM_FILENAME_BASE}State = {",
      "  ${TM_FILENAME_BASE}: {",
      "    property: string;",
      "  };",
      "};",
      "",
      "type ${TM_FILENAME_BASE}Actions = {",
      "  set${TM_FILENAME_BASE}: (value: string) => void;",
      "};",
      "",
      "const use${TM_FILENAME_BASE}Base = create<",
      "${TM_FILENAME_BASE}State & ${TM_FILENAME_BASE}Actions",
      ">()(",
      "  persist(",
      "    (set) => ({",
      "        ${TM_FILENAME_BASE}: {",
      "        property: '',",
      "      },",
      "      set${TM_FILENAME_BASE}: (firstName: string) =>",
      "        set((state: ${TM_FILENAME_BASE}State) => ({",
      "          ${TM_FILENAME_BASE}: { ...state.${TM_FILENAME_BASE}, firstName },",
      "        })),",
      "    }),",
      "    {",
      "      name: '${TM_FILENAME_BASE}', // name of the item in the storage (must be unique)",
      "    }",
      "  )",
      ");",
      "",
      "export const use${TM_FILENAME_BASE} = createSelectors(use${TM_FILENAME_BASE}Base);"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },

  "-useReducer (setup)": {
    "prefix": "react",
    "body": [
      "",
      "",
      "",
      "",
      "import { Reducer, useReducer } from 'react';",
      "",
      "const initialState = { modal: false, loading: true };",
      "",
      "const stateInitialiser = () => {",
      "  return localStorage.getItem('${TM_FILENAME_BASE}-state')",
      "    ? JSON.parse(localStorage.getItem('${TM_FILENAME_BASE}-state') || '')",
      "    : initialState;",
      "};",
      "",
      "export type ${TM_FILENAME_BASE}_State = typeof initialState;",
      "",
      "export type ${TM_FILENAME_BASE}_Actions =",
      "  | { type: 'SET_MODAL'; payload: boolean }",
      "  | { type: 'SET_LOADING'; payload: boolean };",
      "",
      "const reducer = (state: ${TM_FILENAME_BASE}_State, action: ${TM_FILENAME_BASE}_Actions) => {",
      "  let newState = state;",
      "  switch (action.type) {",
      "    case 'SET_MODAL':",
      "      newState = {",
      "        ...state,",
      "        modal: action.payload,",
      "      };",
      "      break;",
      "    case 'SET_LOADING':",
      "      newState = {",
      "        ...state,",
      "        loading: action.payload,",
      "      };",
      "      break;",
      "    default:",
      "      break;",
      "  }",
      "  localStorage.setItem('${TM_FILENAME_BASE}-state', JSON.stringify(newState));",
      "  return newState;",
      "};",
      "",
      "",
      "",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  }
}
